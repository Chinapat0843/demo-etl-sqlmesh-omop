name: SQLMesh CI/CD Bot
run-name: ðŸš€SQLMesh Bot ðŸš€

on:
    pull_request:
        types:
            - synchronize
            - opened
      
    pull_request_review:
        types:
            - edited
            - submitted
            - dismissed
    issue_comment:
        types:
            - created

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
    cancel-in-progress: true

jobs:
  sqlmesh:
    name: SQLMesh Actions Workflow
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write  # Required to post comments
      checks: write  # Required to update check runs
      pull-requests: write  # Required to merge


    steps:

      # Step 0: Setup Python 3.11
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 1: Checkout the appropriate branch depending on PR status
      - name: Checkout PR branch
        if: github.event.pull_request.merged == false  # Only checkout PR branch if not merged
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge  # Checkout the PR branch for testing

      - name: Checkout main branch
        if: github.event.pull_request.merged == true  # Checkout main branch if PR is merged
        uses: actions/checkout@v4
        with:
          ref: main  # Checkout the main branch

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Install Docker Compose (fix the error)
      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=2.12.2  # Set the specific version to install
          sudo curl -L "https://github.com/docker/compose/releases/download/v$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version  # Verify that Docker Compose is installed
          pip install poetry
          poetry install --no-root --no-dev
          


      # Step 4: Build and start Docker Compose services (for PRs that are not merged)
      - name: Build and start Docker Compose for testing
        if: github.event.pull_request.merged == false  # Only build and test if PR is not merged
        # env:
            # POSTGRES_USER: ${{ secrets.POSTGRES_USER}}
            # POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD}}
            # POSTGRES_DB: ${{ secrets.POSTGRES_DB}}
            # POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
            # POSTGRES_PORT: 5432
        
        run: |
          docker-compose up --build -d  # Build and start services in detached mode
          docker-compose exec sqlmesh poetry run sqlmesh info  # Run SQLMesh plan inside the container

      # Step 5: Run CI/CD Bot on PR branch (if not merged)
      - name: Copy `event.json` to sqlmesh container and run CI/CD Bot
        if: github.event.pull_request.merged == false  # Only run CI/CD bot on unmerged PRs
        env:
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a temporary directory and copy event.json into it
          mkdir -p /tmp/github_event
          cp ${{ github.event_path }} /tmp/github_event/event.json
          
          # Copy the event.json file into the sqlmesh container
          docker cp /tmp/github_event/event.json sqlmesh-container:/tmp/event.json

          # Run the CI/CD bot inside the sqlmesh container with the event.json file
          docker-compose exec \
            -e GITHUB_EVENT_PATH=/tmp/event.json \
            -e GITHUB_REPOSITORY=${GITHUB_REPOSITORY} \
            -e GITHUB_RUN_ID=${GITHUB_RUN_ID} \
            -e GITHUB_TOKEN=${GITHUB_TOKEN} \
            -e GITHUB_API_URL=${GITHUB_API_URL}  # Passing GITHUB_API_URL to the container 
            sqlmesh poetry run sqlmesh_cicd -p /app/sqlmesh_project github --token ${{ secrets.GITHUB_TOKEN }} run-all
      # # Step 6: Deploy to Production only if PR is merged into the main branch
      # - name: Deploy to Production
      #   if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
      #   run: |
      #     docker-compose up --build -d  # Ensure everything is built and up
      #     docker-compose exec sqlmesh poetry run sqlmesh_cicd -p ${{ github.workspace }} github --token ${{ secrets.GITHUB_TOKEN }} deploy-production

      # # Step 7: Tear down Docker Compose services after testing
      # - name: Tear down Docker Compose
      #   if: github.event.pull_request.merged == false  # Clean up containers only for unmerged PRs
      #   run: docker-compose down
