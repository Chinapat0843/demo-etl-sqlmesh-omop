name: SQLMesh CI/CD Bot
run-name: ðŸš€SQLMesh Bot ðŸš€

on:
    pull_request:
        types:
            - synchronize
            - opened
      
    pull_request_review:
        types:
            - edited
            - submitted
            - dismissed
    issue_comment:
        types:
            - created

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
    cancel-in-progress: true

jobs:
  sqlmesh:
    name: SQLMesh Actions Workflow
    runs-on: self-hosted
    permissions:
      contents: write
      issues: write  # Required to post comments
      checks: write  # Required to update check runs
      pull-requests: write  # Required to merge

    env:
            POSTGRES_USER: ${{ secrets.POSTGRES_USER}}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD}}
            POSTGRES_DB: ${{ secrets.POSTGRES_DB}}
            POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT: 5432


    steps:

      # Step 0: Setup Python 3.11
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 1: Checkout the appropriate branch depending on PR status
      - name: Checkout PR branch
        if: github.event.pull_request.merged == false  # Only checkout PR branch if not merged
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge  # Checkout the PR branch for testing

      - name: Checkout main branch
        if: github.event.pull_request.merged == true  # Checkout main branch if PR is merged
        uses: actions/checkout@v4
        with:
          ref: main  # Checkout the main branch

      # Step 2: Install Docker Compose (fix the error)
      - name: Install packages
        run: |
          pip install poetry
          poetry install
          
      # Step 5: Run CI/CD Bot on PR branch (if not merged)
      - name: Run CI/CD Bot on PR branch (if not merged)
        if: github.event.pull_request.merged == false  # Only run CI/CD bot on unmerged PRs

        run: |
          poetry run sqlmesh_cicd -p ${{ github.workspace }} github --token ${{ secrets.GITHUB_TOKEN }} run-all

      # # Step 6: Deploy to Production only if PR is merged into the main branch
      # - name: Deploy to Production
      #   if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
      #   run: |
      #     docker-compose up --build -d  # Ensure everything is built and up
      #     docker-compose exec sqlmesh poetry run sqlmesh_cicd -p ${{ github.workspace }} github --token ${{ secrets.GITHUB_TOKEN }} deploy-production

      # # Step 7: Tear down Docker Compose services after testing
      # - name: Tear down Docker Compose
      #   if: github.event.pull_request.merged == false  # Clean up containers only for unmerged PRs
      #   run: docker-compose down
